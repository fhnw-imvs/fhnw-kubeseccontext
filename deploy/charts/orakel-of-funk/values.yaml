# Default values for the orakel-of-funk Helm chart.
# -- Global values are used to set default values for all charts in the deployment.
global:
  imagePullSecrets: []


# -- This is to override the chart name.
nameOverride: ""
# -- Override the fullname of the chart.
fullnameOverride: ""

# -- This is to override the namespace where the chart is deployed.
namespaceOverride: "orakel-of-funk-system"

# -- Global annotations applied to all resources.
globalAnnotations: {}
# -- Global labels applied to all resources.
globalLabels: {}

# -- The orakel-of-funk controller configuration.
orakel:
  replicaCount: 1

  # -- Container image used for the operator
  image:
    # -- Prefix for the image repository, if you mirror the images to a private registry, you need to set this.
    registry: ghcr.io
    repository: fhnw-imvs/fhnw-kubeseccontext
    pullPolicy: IfNotPresent
    # -- Overrides the image tag whose default is the chart appVersion.
    tag: 0.0.1

  # -- The operator clones a full namespace, and recreates all resources within so the service account needs to have the permissions to do so
  serviceAccount:
    # -- Specifies whether a service account should be created
    create: true
    # -- Automatically mount a ServiceAccount's API credentials?
    automount: true
    # -- Annotations to add to the service account
    annotations: {}
    # -- The name of the service account to use.
    name: ""

  # -- Annotations only added to the pod template, not the deployment
  podAnnotations: {}
  # -- Labels only added to the pod template, not the deployment
  podLabels: {}

  # -- Pod security context for the controller pod, this is configured to pass the "restricted" profile of the Pod Security Standards.
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 2492
    runAsGroup: 2492
    fsGroup: 2492
    seccompProfile:
      type: RuntimeDefault

  # -- Pod security context for the controller pod, this is configured to pass the "restricted" profile of the Pod Security Standards.
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - "ALL"

  # -- The operator webhook service, this is used for the admission webhook.
  webhookService:
    type: ClusterIP
    port: 443
    annotations: {}
    labels: {}

  # -- The metrics service, this is used to scrape metrics from the operator.
  metricsService:
    type: ClusterIP
    port: 8443
    annotations: {}
    labels: {}

  # -- The default resource usage of the controller pod, this is set to a low value, so that the controller can run on smaller clusters.
  resources: 
    limits:
      cpu: 500m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 64Mi

  # -- Liveness probe using the default /healthz endpoint provided by the controller-runtime library.
  livenessProbe:
    httpGet:
      path: /healthz
      port: 8081
    initialDelaySeconds: 15
    periodSeconds: 20
  # -- Liveness probe using the default /readyz endpoint provided by the controller-runtime library.
  readinessProbe:
    httpGet:
      path: /readyz
      port: 8081
    initialDelaySeconds: 5
    periodSeconds: 10

  # -- Additional volumes on the output Deployment definition.
  volumes: 
  - name: cert
    secret:
      defaultMode: 420
      secretName: webhook-server-cert

  # -- Additional volumeMounts on the output Deployment definition.
  volumeMounts: 
  - mountPath: /tmp/k8s-webhook-server/serving-certs
    name: cert
    readOnly: true

  nodeSelector: {}

  tolerations: []

  affinity: {}

# -- Valkey is used to store the baseline and check results before analyzing them, if it is configured without a persistent volume, the data will be lost on pod restart, which could cause the analysis to fail.
valkey:
  # -- Image configuration for Valkey
  image:
    registry: ghcr.io
    repository: valkey-io/valkey
    tag: "8.1.3"
    pullPolicy: Always

  # This sets the resources for the Valkey container
  resources:
    requests:
      memory: "512Mi"
      cpu: "300m"
    limits:
      memory: "1Gi"
      cpu: "600m"

  # -- Environment variables for Valkey
  env:
    - name: ALLOW_EMPTY_PASSWORD
      value: "yes"

  # -- The valKey service is only used from the operator so it is not exposed outside the cluster.
  service:
    type: ClusterIP
    port: 6379
    annotations: {}
    labels: {}

  # -- PodSecurityContext for the Valkey pod, this is configured to pass the "restricted" profile of the Pod Security Standards.
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1001
    runAsGroup: 1001
    fsGroup: 1001
    seccompProfile:
      type: RuntimeDefault

  # -- SecurityContext for the Valkey container, this is configured to pass the "restricted" profile of the Pod Security Standards.
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - "ALL"

  # -- Liveness probe for Valkey, these are used to check if the Valkey container is running and ready to accept requests.
  livenessProbe:
    exec:
      command:
      - sh
      - -c
      - "valkey-cli ping | grep PONG"
    initialDelaySeconds: 15
    periodSeconds: 20
  # -- Readiness probes for Valkey, these are used to check if the Valkey container is running and ready to accept requests.
  readinessProbe:
    exec:
      command:
      - sh
      - -c
      - "valkey-cli ping | grep PONG"
    initialDelaySeconds: 5
    periodSeconds: 10

  # -- Storage configuration for Valkey, this is used to store the data of Valkey, if this is disabled an emptyDir is used, which means that the data will be lost if the pod is scheduled to another node
  storage:
    enabled: true
    size: 1Gi
    name: valkey-pvc
    accessModes:
      - ReadWriteOnce
    storageClassName: ""
    annotations: {}
    labels: {}