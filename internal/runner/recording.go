package runner

import (
	checksv1alpha1 "github.com/fhnw-imvs/fhnw-kubeseccontext/api/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// WorkloadRecording contains all signals recorded during a single check/job
type WorkloadRecording struct {
	// Type of workload recording. Allowed values: Baseline,HardeningJob
	// +kubebuilder:validation:Enum=Baseline;HardeningJob
	Type string `json:"type,omitempty"`

	// Indicates wether this configuration ran successfully or not
	Success bool `json:"success"`

	// Time the recording started at
	// +kubebuilder:validation:Type=string
	// +kubebuilder:validation:Format=date-time
	StartTime metav1.Time `json:"startTime,omitempty" protobuf:"bytes,8,opt,name=timestamp"`

	// Time the recording ended at
	// +kubebuilder:validation:Type=string
	// +kubebuilder:validation:Format=date-time
	EndTime metav1.Time `json:"endTime,omitempty" protobuf:"bytes,8,opt,name=timestamp"`

	// The securityContext configurations applied for this job
	SecurityContextConfigurations *checksv1alpha1.SecurityContextDefaults `json:"securityContextConfigurations,omitempty"`

	// The recorded cpu and memory usage during this check run
	RecordedMetrics []ResourceUsageRecord `json:"recordedMetrics,omitempty"`
	// The logs generated by the pod under test
	Logs []string `json:"logs,omitempty"`
}

type ResourceUsageRecord struct {
	// Time when this recording was taken. Used to sort the recordings
	// +kubebuilder:validation:Type=string
	// +kubebuilder:validation:Format=date-time
	Time metav1.Time `json:"timestamp,omitempty" protobuf:"bytes,8,opt,name=timestamp"`
	// CPU usage in nanocpu
	CPU int64 `json:"cpu,omitempty"`
	// Memory usage in bytes
	Memory int64 `json:"memory,omitempty"`
}
